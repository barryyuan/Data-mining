
                  
1.	Answer the following questions briefly: 

(a) For binary data, the L1 distance corresponds to the Hamming distance; that is, the number of bits that are different between two binary vectors. The Jaccard similarity is a measure of the similarity between two binary vectors. Compute the Hamming distance and the Jaccard similarity between the following two binary vectors.
x = 0101010001
y = 0100011000
 

(b) Suppose that you are comparing how similar two organisms of different species are in terms of the number of genes they share. Describe which measure, Hamming or Jaccard, you think would be more appropriate for comparing the genetic makeup of two organisms. Explain. (Assume that each animal is represented as a binary vector, where each attribute is 1 if a particular gene is present in the organism and 0 otherwise.)
 

(c) If you wanted to compare the genetic makeup of two organisms of the same species, e.g., two human beings, would you use the Hamming distance, the Jaccard coefficient, or a different measure of similarity or distance? Explain. (Note that two human beings share > 99.9% of the same genes.)

 
2.  

a.	Use R or Matlab to draw two sine wave time series on one figure. One wave is  and the other wave is  .  
R: 
t<-seq(0,1,by=0.001)
y=sin(5*pi*t)
y1=sin(5*pi*t-pi/2)
plot(t,y,type='n')
lines(t,y,col="blue")
lines(t,y1,col="red")


Matlab: 
x=0:0.001:1;
y=sin(10*pi*x);
plot(x,y)
y1=sin(10*pi*x-pi/2);
hold on
plot(x,y1,'r')

 
b.	Simulate a new time series which is the combination of two above sine wave time series and white noises, i.e. . 
R : 
noise<-rnorm(1001,0,)
z<-y+y1+noise
plot(t,z,type='l',ylim=c(-10,10),col="blue")

Matlab
noise=randn(1,1001);
z=y+y1+noise ;
plot(x,z)
axis([0,1,-10,10])

 

c.	Smooth the time series generated in b) in order that the noises are removed.    
略

3.	Data Transformation

Transaction or market basket data is a special type of record data, which each record (transaction) involves a set of items. The following table shows a sample transaction data set. Each row represents the purchases of a particular customer at a particular time.  

TID	Items
1	Bread, Coke, Milk
2	Beer, Bread
3	Beer, Coke, Diaper, Milk
4	Beer, Bread, Diaper, Milk
5	Coke, Diaper, Milk

Market basket data can be represented in a binary data matrix that has only 0-1 entries. For example, the above transaction data can be converted into the following binary data matrix, where each row corresponds to a transaction and each column corresponds to an item. An item can be treated as a binary variable whose value is 1 if the item is purchased in a transaction and 0 otherwise. 
Bread	Coke	Milk	Beer	Diaper
1	1	1	0	0
1	0	0	1	0
0	1	1	1	1
1	0	1	1	1
0	1	1	0	1

            






a)  Download data transaction.csv from our course website. Write a program to represent this data in a binary format as shown above.
 
b)	Use R or Matlab to determine the number of occurrences for each item in all transactions.

R-hints:
transaction<-read.csv("d:\\transaction.csv",header=F,sep=',')
items<-c('Bread','Coke','Milk','Beer','Diaper','Egg')
…
R: 
transaction<-read.csv("d:\\transaction.csv",header=F,sep=',')
n<-dim(transaction)
items<-c('Bread','Coke','Milk','Beer','Diaper','Egg')
newdata<-matrix(rep(0,60),nrow=10);
 for (i in c(1:n[1]))
{j=1 
while(transaction[i,j]!=''&&j<=n[2])
{k=which(items==transaction[i,j])
#k=match(transaction[i,j],items)            
newdata[i,k]=1
j=j+1}
}
colnames(newdata)<-items         
                          
Matlab: 
fid = fopen('transaction.csv');
        C = textscan(fid,'%s%s%s%s','delimiter',',','emptyValue',-inf);
 fclose(fid);
 C=[C{1},C{2},C{3},C{4}];
 items=cell(1,6); 
 items{1}='Bread';
 items{2}='Coke';
 items{3}='Milk';
 items{4}='Beer';
 items{5}='Diaper';
 items{6}='Egg';
 binarydata=zeros(10,6);
 for i=1:10
     for j=1:4
         if any(strcmp(C{i,j},items))==1
             k=find(strcmp(C{i,j},items)==1);
             binarydata(i,k)=1;
         end 
     end 
 end
     


Use Matlab or R to complete the following question. 

Refer to the data set Iris

a.	Show the percentiles, x0%, x10%, x20%,…, x90%, x100%, for the four quantitative attributes of the Iris data. (hint: R and Matlab command: quantile) 

> apply(iris[,1:4],2,quantile,probs = seq(0,1,0.1))
     Sepal.Length Sepal.Width Petal.Length Petal.Width
0%           4.30        2.00         1.00        0.10
10%          4.80        2.50         1.40        0.20
20%          5.00        2.70         1.50        0.20
30%          5.27        2.80         1.70        0.40
40%          5.60        3.00         3.90        1.16
50%          5.80        3.00         4.35        1.30
60%          6.10        3.10         4.64        1.50
70%          6.30        3.20         5.00        1.80
80%          6.52        3.40         5.32        1.90
90%          6.90        3.61         5.80        2.20
100%         7.90        4.40         6.90        2.50
fid = fopen('Iris.txt');
C = textscan(fid,'%n%n%n%n%s','delimiter',',','emptyValue',-inf);
fclose(fid);
iris=cell2mat(C(:,1:4));
quantile(iris(:,1:4),(0:0.1:1))

ans =
 
    4.3000    2.0000    1.0000    0.1000
    4.8000    2.5000    1.4000    0.2000
    5.0000    2.7000    1.5000    0.2000
    5.2500    2.8000    1.7000    0.4000
    5.6000    3.0000    3.9000    1.1500
    5.8000    3.0000    4.3500    1.3000
    6.1000    3.1000    4.6500    1.5000
    6.3000    3.2000    5.0000    1.8000
    6.5500    3.4000    5.3500    1.9000


b.	Give means, medians, range, standard deviation, absolute average difference (AAD), median absolutes different (MAD), and interquartile range (IQR) for the four quantitative attributes of Iris data. 
> apply(iris[,1:4],2,mean)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
    5.843333     3.057333     3.758000     1.199333 
> apply(iris[,1:4],2,median)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
        5.80         3.00         4.35         1.30
> a1<-apply(iris[,1:4],2,range)
> a1[2,]-a1[1,]
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
         3.6          2.4          5.9          2.4
> round(apply(iris[,1:4],2,sd),2)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
        0.83         0.44         1.77         0.76
> AAD<-function(x)
+ {y<-mean(abs(x-mean(x)))
+ return(y)
+ }
> round(apply(iris[,1:4],2,AAD),2)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
        0.69         0.34         1.56         0.66
> MAD<-function(x)
+ {y<-median(abs(x-median(x)))
+ return(y)
+ }
> round(apply(iris[,1:4],2,MAD),2)
Sepal.Length     Sepal.Width     Petal.Length  Petal.Width 
        0.70         0.30           1.25         0.70
>aa<-apply(iris[,1:4],2,quantile)
> aa[4,]-aa[2,]
Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
         1.3          0.5          3.5          1.5

mean(iris(:,1:4))

ans =

5.8433    3.0540    3.7587    1.1987
median(iris(:,1:4))

ans =

    5.8000    3.0000    4.3500    1.3000
range(iris(:,1:4))

ans =

    3.6000    2.4000    5.9000    2.4000
std(iris(:,1:4))	

ans =

    0.8281    0.4336    1.7644    0.7632

function[y]=AAD(x)
y=mean(abs(x-ones(length(x),1)*mean(x)));
AAD(iris(:,1:4))
Another Simple method
mad(iris(:,1:4),0)-----absolute average difference/mean absolute deviation

ans =

    0.6876    0.3331    1.5619    0.6589

mad(iris(:,1:4),1)------median absolutes different

ans =

    0.7000    0.2500    1.2500    0.7000

IQR(iris(:,1:4))

ans =

    1.3000    0.5000    3.5000    1.5000


c.	Show histograms (with 10 bins) for sepal length, sepal width, petal length, and petal width. (hint: R and Matlab command: hist)
par(mfrow=c(2,2))
par1<-apply(iris[,1:4],2,hist,nclass=10,col="blue")
 

subplot(2,2,1)
hist(iris(:,1))
subplot(2,2,2)
hist(iris(:,2))
subplot(2,2,3)
hist(iris(:,3))
subplot(2,2,4)
hist(iris(:,4))

 


d.	Create box plots for the four attributes of the Iris data set and show these box plots in one figure. (hint: R and Matlab command: boxplot)
>boxplot(iris[,1:4])
 
boxplot(iris(:,1:4))
 


e.	Display a pie chart that shows the distribution of Iris species in the Iris data set. (hint: R and Matlab command: pie)
attach(iris)
t=table(Species)
label=paste(names(t),"=",round(t/sum(t),2)*100,"%")
pie(t,label)
 
 iris=xlsread('iris')
T=tabulate(iris(:,5)) %excel data
pie(T(:,2))
 


f.	Show a scatter plot for each pair of attributes of the Iris data set. The different species of Iris should be indicated by different markers. Arrange the scatter plots of pairs of attributes in this type of tabular format. (suggestions: R command, pairs; Matlab command, plotmatrix

sc<-iris$Species
pairs(iris[1:4], main = "Iris Data -- 3 species", pch = c(20:22)[sc], col=c(2:4)[sc])
legend("topleft",levels(sc),cex=0.7,col=c(2:4),pch=c(20:22),inset=.08)  
gplotmatrix(iris(:,1:4),iris(:,1:4),iris(:,5)) 

g.	Show a three-dimensional scatter plot for three attributes petal width, sepal width and sepal length in the Iris data set. Different species of Iris should be indicated by different markers. 
R:
install.packages()
library(scatterplot3d)
sc<-iris$Species
scatterplot3d()

Matlab
Plot3()

install.packages()
library(scatterplot3d)
sc<-iris$Species
scatterplot3d(iris[,c(2,4,1)],color=c(2:4)[sc],pch=c(20:22)[sc],angle=120)
legend(2,11,levels(sc),col=c(2:4),pch=c(20:22))

 

plot3(iris(:,1),iris(:,2),iris(:,4),'o')

 


h.	Generate a parallel coordinates plot of the four numerical attributes of the Iris data set. (suggestion: R: matplot, Matlab: plot or csparallel)
data1<-t(iris[,1:4])
sc<-iris$Species
matplot(data1,type='l',col=c(2:4)[sc], lty=c(1:3)[sc])
legend(1,8,levels(sc),lwd=1,cex=1,col=c(2:4),lty=c(1:3)) 
  plot((iris(1:50,1:4))','g')
hold on
plot((iris(51:100,1:4))','r')
plot((iris(101:150,1:4))','b')
Another method: csparallel()
 





i.	Show the star plots, respectively, of 15 flowers from the Iris data set. The first 5 flowers are of species Setosa, the second 5 are Versicolour, and the last 5 are Virginica. (R: stars, Matlab: glyphplot)

stars(iris[c(1:5,51:55,101:105),1:4], full = TRUE, scale = TRUE, radius = TRUE)
 
glyphplot(iris(:,1:4), 'Glyph','star')

 
glyphplot(iris(:,1:4), 'Glyph','face')

 


j.	Discretize the petal length and petal width attributes to have values of low, medium and high and then count the number of flowers that have particular combinations of petal width, petal length, and species type. (For petal width, the categories low, medium, and high correspond to the interval [0,0.75], [0.75,1.75], [1.75, ∞), respectively. . For petal length, the categories low, medium and high correspond to the intervals [0, 2.5), [2.5, 5), [5, ∞), respectively. Show the result by a table. (suggestion: R, cut)
R; 
attach(iris)
   pwidth<-cut(Petal.Width,br=c(0,0.75,1.75,max(Petal.Width)),lab=c("low","medium","high"))

attach(iris)
pwidth<-cut(Petal.Width,br=c(0,0.75,1.75,max(Petal.Width)),lab=c("low","medium","high"))
plength<-cut(Petal.Length,br=c(0,2.5,5,max(Petal.Length)),lab=c("low","medium","high"))
iris.new<-data.frame(plength,pwidth,Species)
x1<-levels(plength)
x2<-levels(pwidth)
x3<-levels(Species)
sdata<-expand.grid(x1,x2,x3)
names(sdata)<-names(iris)[3:5]
count=rep(0,27)
ln<-dim(iris.new)[1]
for (i in 1:ln)
{for (k in 1:3)
{if (iris.new[i,3]==x3[k])
    for (l in 1:3)
    if (iris.new[i,2]==x2[l])
    for (m in 1:3)
   if (iris.new[i,1]==x1[m])
{p1=9*(k-1)+3*(l-1)+m
count[p1]=count[p1]+1}
}
}
sdata<-cbind(sdata,count)
tdata<-sdata[count!=0,]

Petal.Length  Petal.Width   Species   count
1           low         low     setosa      50
14       medium      medium   versicolor    48
15         high       medium   versicolor     1
17       medium        high    versicolor     1
23       medium      medium   virginica      2
24         high       medium   virginica      3
26       medium        high    virginica      7
27         high         high    virginica      38
Alternative: 
attach(iris)
pwidth<-cut(Petal.Width,br=c(0,0.75,1.75,max(Petal.Width)),lab=c("low","medium","high"))
plength<-cut(Petal.Length,br=c(0,2.5,5,max(Petal.Length)),lab=c("low","medium","high"))
iris.new<-data.frame(plength,pwidth,Species)
level1<-paste(iris.new[,1],iris.new[,2],iris.new[,3],sep='.')
tt<-table(level1)
for (i in c(1:length(tt))) cat(names(tt[i]),'\t',tt[i],'\n')
high.high.virginica      38 
high.medium.versicolor   1 
high.medium.virginica    3 
low.low.setosa          50 
medium.high.versicolor   1 
medium.high.virginica    7 
medium.medium.versicolor  48 
medium.medium.virginica   2

Alternative III
attach(iris)
pwidth<-cut(Petal.Width,br=c(0,0.75,1.75,max(Petal.Width)),lab=c("low","medium","high"),right=F,include.lowest=T)
plength<-cut(Petal.Length,br=c(0,2.5,5,max(Petal.Length)),lab=c("low","medium","high"),right=F,include.lowest=T)
iris.new<-data.frame(plength,pwidth,Species)

x1<-levels(plength)
x2<-levels(pwidth)
x3<-levels(Species)
sdata<-expand.grid(x1,x2,x3)
names(sdata)<-names(iris)[3:5]
count=rep(0,27)

for (i in 1:27) 
{for (j in 1:150) 
 {check=all( sdata[i,]==iris.new[j,])
 if(check==T) {count[i]=count[i]+1} }
}
sdata<-cbind(sdata,count)
tdata<-sdata[count!=0,]


k.	Use the result obtained in the question 11 to organize the data as a multidimensional array with three dimensions corresponding to petal width, petal length, and species type, as illustrated in the lecture note. (suggestion: R, table)
table(iris.new)
, , Species = setosa
             pwidth
plength   low medium high
 low      50      0    0
  medium   0      0    0
  high      0      0    0

, , Species = versicolor
          pwidth
plength   low  medium high
  low      0      0     0
 medium   0     48    1
  high      0      1    0

, , Species = virginica
        pwidth
plength  low medium high
  low       0      0    0
medium   0      2    7
high      0      3   38






l.	Create cross-tabulation of flowers according to petal length and width for flowers of the Setosa species. 
     Hint: table(data)[,,1]

table(iris.new)[,,1]
            pwidth
plength  low medium  high
  low      50      0    0
  medium   0      0    0
  high      0      0  



